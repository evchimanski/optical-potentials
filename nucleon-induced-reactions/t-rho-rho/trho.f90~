!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! trho optical potential 
! Main parameters
module constants
  public
  
  REAL*8,  parameter   :: HBARC=197.3269631d0,e2=1.44d0
  REAL*8,  parameter   :: PI=4.0d0*ATAN(1.0d0)
  complex*16, parameter :: im=(0.0d0,1.0d0)
!------ target Nucleus parameters -------------
  REAL*8              :: PN,A,NN
  REAL*8,  parameter  :: smallr0=1.31d0,a0=0.5d0
  REAL*8              :: R0
!------nucleon parameters ------
  REAL*8,  parameter  :: m_P=938.27d0
  REAL*8              :: m_mu

!------- trho parameters -----------------
  INTEGER,parameter   :: ntrho=1 ! number of particle energies in continuum
  REAL*8              :: Rfit,rho0
 
! ------------ Energy parameters and cutoff for ph states
  REAL*8              :: Ei,Ei_mu,ki_mu
  REAL*8              :: bHO ! HO parameter

 !----------------- Coulomb potential for incoming and outgoing particle -----------
  INTEGER     :: icflag ! 1-- Coulomb, 0 -- no Coulomb 

CONTAINS

    SUBROUTINE input()
    IMPLICIT NONE
    OPEN(100, status='unknown', file = 'input.in')
    READ(100,*)PN,A
    NN=A-PN
    R0=smallr0*A**(1.0d0/3.0d0)-0.84d0
    m_mu=m_P*(A/(A+1.0d0))
    READ(100,*)Ei,icflag
    
    Ei_mu=(A/(A+1.0d0))*Ei ! incoming nucleon energy-- !  Ei_mu=(  ! MeV in lab and reduced (CM)(see Satcheler, intro nuclear reac. appendix B)

    Ki_mu=sqrt(2.0d0*m_mu*Ei_mu)/HBARC
  
    !trho parameter rho0
    Rfit=smallr0*A**(1.0d0/3.0d0)-0.87d0 +0.82d0/A**(1.0d0/3.0d0)
    rho0=A/((4.0d0*Pi/3.0d0)*Rfit**3)
   
  END SUBROUTINE input

end module constants


PROGRAM ES
  USE constants
  IMPLICIT NONE
  REAL*8   :: E_mu
  !------- trho parameters -----------------
  REAL*8,allocatable :: alldata(:,:)
  INTEGER  :: dimen,indmax	
  REAL*8   :: sigpp,alphapp,sigpn,alphapn ! incident nucleon 
  REAL*8   :: trhopar(ntrho,5) !energy,sigpp,alphapp,sigpn,alphapn

  CALL input()

!----- read data for interpolation -- trho parameters -----
  CALL get_dimension(dimen,'par.in')
!  write(*,*)dimen
  indmax=5
  ALLOCATE(alldata(dimen,indmax))
  CALL read_param_in(dimen,indmax,alldata)
!----- get trho parameters for incoming particle ----
  trhopar=0.0d0

  E_mu=Ei_mu
  CALL trho_param(dimen,indmax,alldata,E_mu,sigpp,alphapp,sigpn,alphapn)
  trhopar(1,1)=E_mu
  trhopar(1,2)=sigpp
  trhopar(1,3)=alphapp
  trhopar(1,4)=sigpn
  trhopar(1,5)=alphapn
  CALL plot_pot(trhopar(1,:),icflag) !proton   
  
  write(*,*)'end'

ENDPROGRAM ES

  !------------ given E -- GET Trho parameters -----------------
  SUBROUTINE trho_param(dimen,indmax,alldata,E,sigpp,alphapp,sigpn,alphapn)
    USE constants
    IMPLICIT NONE
    REAL*8,intent(out) :: sigpp,alphapp,sigpn,alphapn
    INTEGER,intent(in) :: dimen,indmax
    REAL*8,intent(in)  :: E,alldata(dimen,indmax)
    REAL*8 :: y,fy,dfy
    INTEGER :: ind
 
    open(1111, status='unknown', file = 'trho-param.dat',position='append')
    sigpp=0.0d0
    alphapp=0.0d0
    sigpn=0.0d0
    alphapn=0.0d0
	
    y=E
    ind=2
    CALL set_interp(y,ind,dimen,indmax,alldata,fy,dfy)
    sigpp=fy*0.1d0 !convert mb to fm^2

    ind=3
    CALL set_interp(y,ind,dimen,indmax,alldata,fy,dfy)
    alphapp=fy

    IF(icflag.eq.0)THEN ! neutron induced reaction
       sigpp=0.0d0
       alphapp=0.0d0
    ELSE
    ENDIF

    ind=4
    CALL set_interp(y,ind,dimen,indmax,alldata,fy,dfy)
    sigpn=fy*0.1d0 !convert mb to fm^2
    
    ind=5
    CALL set_interp(y,ind,dimen,indmax,alldata,fy,dfy)
    alphapn=fy
    
    WRITE(1111,'(20G20.10)')E,sigpp,alphapp,sigpn,alphapn
    flush(1111)
 ENDSUBROUTINE trho_param


!---------- SUBOUTINE TO READ DATA FOR INTERPOLATION -----------
SUBROUTINE read_param_in(dimen,indmax,alldata)
INTEGER,intent(in) :: dimen,indmax
REAL*8             :: alldata(dimen,indmax)

OPEN(1, status='old', file = 'par.in')
DO i=1,dimen
   READ(1,*)(alldata(i,j),j=1,indmax)
ENDDO
 close(1)

END SUBROUTINE read_param_in

!---------- INTERPOLATION -----------
SUBROUTINE set_interp(y,ind,dimen,indmax,alldata,fy,dfy)
  IMPLICIT NONE
INTEGER,intent(in) :: ind,dimen,indmax
REAL*8,intent(in)  :: y,alldata(dimen,indmax)
REAL*8,intent(out) :: fy,dfy

INTEGER :: i,j,k
REAL*8 :: x(3), f(3)
REAL*8 :: dif,dift
INTEGER :: ns,ki,kf


  fy=0.0d0
  dfy=0.0d0

! loop to find value of x closest to y 
ns = 1
dif = ABS(y-alldata(1,1))
DO k = 1, dimen
  dift = ABS(y-alldata(k,1))
  IF(dift < dif) THEN
    ns = k
    dif = dift
   END IF
END DO

x=0.0d0
f=0.0d0

  
   IF(ns.EQ.dimen)THEN
      ki=ns-1
      kf=ns
   ELSE
   ENDIF

   IF(ns.EQ.1)THEN
      ki=ns
      kf=ns+1
   ELSE
   ENDIF

   IF(ns.NE.1 .and. ns.NE.dimen)THEN
   IF(alldata(ns,1).LT.y)THEN
      ki=ns
      kf=ns+1
   ELSE
   ENDIF

   IF(alldata(ns,1).GT.y)THEN
      ki=ns-1
      kf=ns
   ELSE
   ENDIF

   IF(alldata(ns,1).EQ.y)THEN
      ki=ns
      kf=ns+1
   ELSE
   ENDIF
   
   ELSE
   ENDIF
   
   j=0
   DO i=ki,kf
      j=j+1
      x(j)=alldata(i,1)
      f(j)=alldata(i,ind)
   ENDDO


   fy=0.0d0
   CALL interp_linear(x,f,y,fy)
  
   
END SUBROUTINE set_interp


subroutine interp_linear( x, y, xVal, yVal )
! Inputs: x = a vector of the x-values of the data to be interpolated
!         y = a vector of the y-values of the data to be interpolated
!         xVal  = a x-value point where interpolation should be performed
! Output: yVal  = resulting interpolated value
  implicit none

  real*8, intent(in) :: x(2), y(2), xVal
  real*8, intent(out) :: yVal

 IF(xVal.gt.maxval(x) .or. xVal.lt.minval(x))THEN
    write(*,*)'linear interp error, X is not in between x0 and x1'
    WRITE(*,*)xVal,x
    
    STOP
    yVal=0.0d0
 ELSE
    yVal=((y(2)-y(1))/(x(2)-x(1))*(xVal-x(1)))+y(1)
 ENDIF


end subroutine interp_linear


! ----------- get dimension of a file ----------------------
SUBROUTINE get_dimension(n,fname)
  IMPLICIT NONE
  INTEGER,intent(out)          :: n
  CHARACTER(len=*),intent(in)  :: fname
  REAL*8   :: noth
  
  OPEN(1111, status='old', file = fname)
  
  n=0
  DO
     READ(1111,*,end=1234)noth
     n=n+1
  ENDDO
  
1234 CLOSE(1111)
  
END SUBROUTINE GET_DIMENSION

!-----------------WS function - potential -------------
FUNCTION WSf(x,V0)
  USE constants
  IMPLICIT NONE
  REAL*8,intent(in) :: x,V0
  REAL*8            :: WSf


  WSf=V0/(1.0d0+EXP((x-R0)/a0))

END FUNCTION WSf
!-----------------Plot potential -------------
SUBROUTINE plot_pot(trhopar,iq)
  USE constants
  IMPLICIT NONE
  REAL*8,intent(in) :: trhopar(5)

  REAL*8    :: E,k,ri,rf,dr,r,cte,vc,vreal,wimg,Elab
  complex*16 :: pot,weight
  REAL*8, external ::WSf
  INTEGER   :: i,nr,iq
  character(40) :: fname
  REAL*8    :: sigpp,alphapp,sigpn,alphapn 

  

  E=trhopar(1)  
  sigpp=trhopar(2)
  alphapp=trhopar(3)
  sigpn=trhopar(4)
  alphapn=trhopar(5)
  IF(icflag.eq.0)THEN
     weight = (sigpp*(im+alphapp)*(NN/A)+sigpn*(im+alphapn)*(PN/A))
  ELSE
     weight = (sigpp*(im+alphapp)*(PN/A)+sigpn*(im+alphapn)*(NN/A))
  ENDIF

!  Elab=E/(A/(A+1.0d0))
  
  fname= './pot.dat'   
  open(1119, status='unknown', file = fname)

  K=sqrt(2.0d0*m_mu*E)/HBARC

  cte=-(k*hbarc**2)/(2.0d0*m_mu)

  vreal=REALPART(cte*weight)*rho0
  wimg=IMAGPART(cte*weight)*rho0
  write(*,*)vreal,wimg

  vc=0
  
  nr=100
  ri=0.0d0
  rf=20.0d0
  dr=(rf-ri)/nr

  r=0.0d0
  DO i=0,nr
     r=ri+i*dr

     pot=weight*WSf(r,rho0)
     pot=cte*pot

  IF (iq.eq.1)THEN
     !PROTON
     IF(r.LE.R0)THEN
        vc=PN*e2*(3-(r/R0)**2)/(2.0d0*R0)
     ELSE
        vc=PN*e2/r
     ENDIF
  
  ELSE
  !NEUTRON
     vc=0
     
  ENDIF

     write(1119,'(20G20.10)')r,pot,pot+vc,weight,vreal,wimg

  ENDDO
  close(1119)
  
  open(2229, status='unknown', file = 'V0_W0.dat')
  write(2229,*)E,weight
  close(2229) 
END SUBROUTINE plot_pot

